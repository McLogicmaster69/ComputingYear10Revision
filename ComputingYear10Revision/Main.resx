<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AABAREQBQEREAUBERAFAREQCQEREAkBERAFAREQBQEREAUBERAJAREQCQEREAUBERAFAREQBQEREAkBE
        RAJAREQBQEREAUBERAFAREQCQEREAkBERAFAREQBQEREAUBERAJAREQCQEREAUBERAFAREQBQEREAkBE
        RAJAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAE/R0sBP0lQAT9JTwE/SU8BP0lPAT9JUAE/SVABP0lPAT9J
        TwE/SU8BP0lQAT9JUAE/SU8BP0lPAT9JTwE/SVABP0lQAT9JTwE/SU8BP0lPAT9JUAE/SVABP0lPAT9J
        TwE/SU8BP0lQAT9JUAE/SE0BQERFAUBERAFAREQBP0RFAEI5KQRCOCgHQzgoB0M4KAdDOCgHQjgoB0I4
        KAdDOCgHQzgoB0M4KAdCOCgHQjgoB0M4KAdDOCgHQzgoB0I4KAdCOCgHQzgoB0M4KAdDOCgHQjgoB0I4
        KAdDOCgHQzgoB0M4KAdCOCgHQjgoB0I4KQZAPTUBQEVGAUgmAABDNSE5RDUhqEQ1IbdENSG2RDUhtkQ1
        IbZENSG2RDUhtkQ1IbZENSG2RDUhtkQ1IbZENSG2RDUhtkQ1IbZENSG2RDUhtkQ1IbZENSG2RDUhtkQ1
        IbZENSG2RDUhtkQ1IbZENSG2RDUhtkQ1IbZENSG3RDUhskM1IVlBOzACPzYnBEY3IqZIOCP/Rzch/0g4
        Iv9HNyH/Rzch/0c3If9HNyH/Rzch/0c3If9HNyH/Rzch/0c3If9HNyH/Rzch/0g4Iv9HNyH/SDgi/0c3
        If9IOCL/SDgi/0c3Iv9HNyL/SDgi/0c3Iv9IOCL/STci/0k4Iv9JOST/Rjgj00Q2IhtGOScHSToktVNE
        L/+GfnH/dWpb/4V8cP+Ph3z/joZ7/46Ge/+Ohnv/joZ7/46Ge/+Ohnv/joZ7/46Ge/+Oh3z/dWpa/4V9
        cP91alv/hn1x/29jU/97cWP/fXNm/31zZv99dGb/fXRm/3xzZv9Oc3b/THF0/0s9J/9KOyXfSTolJEo8
        KQdKOiO1WUo3/7Suqf+VjIH/saum/8K/vP+/vbv/wL67/7+9u//Avrv/v727/8C+u/+/vbv/wL67/8C+
        vP+TjIL/sqyn/5WMgf+zraf/ioB0/5+Zkv+knpf/op2V/6Kdlf+knpf/oZ6Y/1Ccsf9Nma7/Sz4p/0s7
        Jd9LOyYkSjwpB0s6JLVNRjT/W4yX/1eRn/9alaT/ZHx6/5aOhP+FfHD/lY6F/4V8cP+VjoX/hXxw/5WO
        hf+FfG//lo6E/3d1a/9ai5X/V5Gf/1uWpf9Uamb/Vkcy/1hKNv+If3P/h39z/1hKNv9WSjf/TX+I/0x+
        h/9LPSj/Szsl30s7JiRKPCkHSzojtUtKO/9NrMn/Tb3j/0q84v9YipT/saul/5OMgv+vq6b/k4yC/6+r
        pv+TjIL/r6um/5OMgv+wq6b/hoyH/0usx/9NvuL/Tb/j/0x8gv9KOCH/TT0o/6Cbk/+gm5P/TT0n/0o9
        KP9NmK3/TZit/0s+Kf9LOyXfSzsmJEo8KQdLOiS1S0Y1/0yNnP9UfIH/ho6K/3d1a/+TjIL/f3Zo/5OM
        gv9/dWj/k4yC/392aP+TjIL/f3Vo/5SNgv90bmn/R1SM/0hZnP9IWZz/Skpg/0s7I/9LOyX/V0g0/1ZI
        NP9LOyX/Sz0o/0x+h/9Mfof/Sz0o/0s7Jd9LOyYkSjwpB0s6I7VLSjv/TazK/1qLlf+yq6X/lIyC/6+r
        pv+TjIL/r6um/5OMgv+vq6b/k4yC/6+rpv+TjIL/sKym/4R/g/9CSa//RE/J/0VS3f9IR4H/Szsg/0s7
        I/9KOiL/Sjoi/0s7Iv9LPif/TZqt/02arf9LPin/Szsl30s7JiRKPCkHSzoktUtGNf9MjZz/VnV2/5SM
        gv9/dWj/k4yC/391aP+TjIL/f3Zo/5OMgv9/dWj/k4yC/392aP+TjIL/fXRo/4V/g/9rZ3r/RVDL/0hH
        hP9JQ2b/SURr/0lEa/9JRGv/SURr/0lEa/9JUX7/SVF7/0s8KP9LOyXfSzsmJEo8KQdLOiO1S0o7/0yt
        zP9ajJb/sqym/5SNg/+wrKf/lI2D/7Gtp/+VjYP/sa2n/5WNg/+xraf/lY2D/7Gtp/+VjYP/sq6n/4aA
        g/9DS7H/R0Z5/0dKmv9GS6D/Rkug/0dLoP9GS5//R0uf/0ZKn/9HSpv/Szsp/0s7Jd9LOyYkSjwpB0s7
        JbVNPyv/WltP/1hSQv9oW0r/YFJA/2hbSv9dUED/WE1L/1RIQf9YTUv/VEhA/1hNS/9USED/WE1L/1dK
        QP9oW0r/XVBA/1lOS/9TRjz/Sj00/0o9Nv9KPTb/Sj01/0o9Nv9KPTb/Sj01/0o9Nf9LOyb/Szsl30s7
        JiRLPSsHSjoktVdINP+knZb/ioF1/6GclP+JgXX/op2U/312dv9ESJ3/R0Z7/0ZKnf9HRnv/Rkqd/0dG
        e/9FSZ3/VFF6/6OdlP+JgXX/o56V/350Zv9KOSL/Szsk/0s7JP9LOyT/bGNW/2xjVv9laBT/ZWgU/0s7
        Jf9LOyXfSzwnJFpPPgdQQSyzTj4p/1pMOP9WRzP/Wkw4/1ZHM/9aTDj/VEUz/0o+Ov9KPTT/Sj46/0o9
        NP9KPjr/Sj00/0o9Ov9NPzT/Wkw4/1ZHM/9aTDj/VEUw/0s7Jf9LOyX/Szsl/0s7Jf9sY1f/bWRX/2Zp
        Fv9laBX/Szwl/09AKt1VRzMjF2O1AFtMOHlYSTX1Vkcy+VZHM/lWRzL5Vkcz+VZHM/lWRzP5V0gy+VdI
        M/lXSDL5V0gz+VdIMvlYSTT8WEk0/ldIM/lWRzP5Vkcz+VZHMvlWRzP5V0g0+VdINPlXSDT5V0g0+VdI
        NPlXSDT5V0g0+VdINPlXSDT6Wks3qFxPPQ0AKF0AW008DF1OOz5dTztLXU87Sl1PO0pdTztKXU87Sl1P
        O0pdTztKXU87Sl1PO0pdTztKW0w4R3dwZpmAe3b0bmRXblpLN0ZdTjtKXU47Sl1OO0pdTjtKXU47Sl1P
        O0pdTztKXU87Sl1PO0pdTjtKXU47S11PO0ZcTjsXAADeAEBERAE8Q0UBIDpPACc8TQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACXmJgAl5iYPJiYmO2YmZmWnqGlFMTd+wPB2PQDwNfzA8Tc
        9QLa8/8A2vP/AAAAAAAAAAAAAAAAAAAAAAAAAAAASEdBADpCRgFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAQYNDQGJiYkFl5eXgZeXl/SXl5fXl5eXu5eX
        l7qXl5e7l5eXuZeXl5aWlpY9gIGBAikuLgFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAQAAAACQkJAJlpaWVZeX
        l6WXl5e6l5eXupeXl7qXl5e+l5eX45eXl+mXl5dV////ADs/PwFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREATg8
        PAH///8Aenx8A4WGhgeGh4cHhoeHB4eIiAeVlZUrl5eXxJeXl9GUlJQZ////AEBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAE1OjoBJSoqASQpKQEkKSkBHCEhAaKhoQCXl5del5eX85aWlkC4trYAQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBODw8ASUq
        KgEkKSkBJCkpASQpKQEkKSkBJCkpASQpKQEkKSkBJCkpASQpKQEcISEBoqGhAJeXl16Xl5fzlpaWQLi2
        tgBAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREATc8
        PAF3eHgDhoeHB4aHhweGh4cHhoeHB4aHhweGh4cHhoeHB4aHhweGh4cHhoeHB4eIiAeVlZUql5eXxJeX
        l9GUlJQZ////AEBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAE2OzsBXmFhApeXl26Xl5e8l5eXupeXl7qXl5e6l5eXupeXl7qXl5e6l5eXupeXl7qXl5e6l5eXvZeX
        l+OXl5fplpaWVf///wA7Pz8BQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREATY7OwFdYGACl5eXbpeXl7yXl5e6l5eXupeXl7qXl5e6l5eXupeXl7qXl5e6l5eXupeX
        l7qXl5e5l5eXl5aWlj1/gYECKS4uAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREATc8PAF4eXkChoeHB4aHhweGh4cHhoeHB4aHhweGh4cHhoeHB4aH
        hweGh4cHhoeHB4SFhQZ0dXUCAAAAADxAQAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREATg8PAElKioBJCkpASQpKQEkKSkBJCkpASQp
        KQEkKSkBJCkpASQpKQEkKSkBJywsATo+PgFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAJAREQCQEREAkBERAFAREQBQEREAkBERAJAREQCQEREAUBE
        RAFAREQCQEREAkBERAJAREQBQEREAUBERAJAREQCQEREAkBERAFAREQBQEREAkBERAJAREQCQEREAUBE
        RAFAREQCQEREAkBERAJAREQBAAAAAAAAAAAAAAAAQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAAAAT/8A/wAAAAAAAIAQAAAgCAAAAIgAAACIAAA
        ACAAAABAAAAAAAAAAQAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>